{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AwesomeCordovaNativePlugin, instanceAvailability, cordovaInstance } from '@awesome-cordova-plugins/core';\nimport { Observable } from 'rxjs';\nimport * as ɵngcc0 from '@angular/core';\n\nvar InAppBrowserObject =\n/** @class */\nfunction () {\n  /**\n   * Opens a URL in a new InAppBrowser instance, the current browser instance, or the system browser.\n   *\n   * @param {string} url     The URL to load.\n   * @param {string} [target=\"self\"]  The target in which to load the URL, an optional parameter that defaults to _self.\n   *                 _self: Opens in the WebView if the URL is in the white list, otherwise it opens in the InAppBrowser.\n   *                 _blank: Opens in the InAppBrowser.\n   *                 _system: Opens in the system's web browser.\n   * @param {string | InAppBrowserOptions} [options] Options for the InAppBrowser. Optional, defaulting to: location=yes.\n   *                 The options string must not contain any blank space, and each feature's\n   *                 name/value pairs must be separated by a comma. Feature names are case insensitive.\n   */\n  function InAppBrowserObject(url, target, options) {\n    try {\n      if (options && typeof options !== 'string') {\n        options = Object.keys(options).map(function (key) {\n          return key + \"=\" + options[key];\n        }).join(',');\n      }\n\n      this._objectInstance = cordova.InAppBrowser.open(url, target, options);\n    } catch (e) {\n      if (typeof window !== 'undefined') {\n        window.open(url, target);\n      }\n\n      console.warn('Native: InAppBrowser is not installed or you are running on a browser. Falling back to window.open.');\n    }\n  }\n\n  InAppBrowserObject.prototype._loadAfterBeforeload = function (strUrl) {\n    return cordovaInstance(this, \"_loadAfterBeforeload\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  InAppBrowserObject.prototype.show = function () {\n    return cordovaInstance(this, \"show\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  InAppBrowserObject.prototype.close = function () {\n    return cordovaInstance(this, \"close\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  InAppBrowserObject.prototype.hide = function () {\n    return cordovaInstance(this, \"hide\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  InAppBrowserObject.prototype.executeScript = function (script) {\n    return cordovaInstance(this, \"executeScript\", {}, arguments);\n  };\n\n  InAppBrowserObject.prototype.insertCSS = function (css) {\n    return cordovaInstance(this, \"insertCSS\", {}, arguments);\n  };\n\n  InAppBrowserObject.prototype.on = function (event) {\n    var _this = this;\n\n    return function () {\n      if (instanceAvailability(_this) === true) {\n        return new Observable(function (observer) {\n          _this._objectInstance.addEventListener(event, observer.next.bind(observer));\n\n          return function () {\n            return _this._objectInstance.removeEventListener(event, observer.next.bind(observer));\n          };\n        });\n      }\n    }();\n  };\n\n  InAppBrowserObject.prototype.on = function (event) {\n    var _this = this;\n\n    return function () {\n      if (instanceAvailability(_this) === true) {\n        return new Observable(function (observer) {\n          _this._objectInstance.addEventListener(event, observer.next.bind(observer));\n\n          return function () {\n            return _this._objectInstance.removeEventListener(event, observer.next.bind(observer));\n          };\n        });\n      }\n    }();\n  };\n\n  return InAppBrowserObject;\n}();\n\nexport { InAppBrowserObject };\n\nvar InAppBrowser =\n/** @class */\nfunction (_super) {\n  __extends(InAppBrowser, _super);\n\n  function InAppBrowser() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Opens a URL in a new InAppBrowser instance, the current browser instance, or the system browser.\n   *\n   * @param  url {string}     The URL to load.\n   * @param  target {string}  The target in which to load the URL, an optional parameter that defaults to _self.\n   * @param  options {string} Options for the InAppBrowser. Optional, defaulting to: location=yes.\n   *                 The options string must not contain any blank space, and each feature's\n   *                 name/value pairs must be separated by a comma. Feature names are case insensitive.\n   * @returns {InAppBrowserObject}\n   */\n\n\n  InAppBrowser.prototype.create = function (url, target, options) {\n    return new InAppBrowserObject(url, target, options);\n  };\n\n  InAppBrowser.pluginName = \"InAppBrowser\";\n  InAppBrowser.plugin = \"cordova-plugin-inappbrowser\";\n  InAppBrowser.pluginRef = \"cordova.InAppBrowser\";\n  InAppBrowser.repo = \"https://github.com/apache/cordova-plugin-inappbrowser\";\n  InAppBrowser.platforms = [\"AmazonFire OS\", \"Android\", \"Browser\", \"iOS\", \"macOS\", \"Windows\"];\n\n  InAppBrowser.ɵfac = /*@__PURE__*/function () {\n    var ɵInAppBrowser_BaseFactory;\n    return function InAppBrowser_Factory(t) {\n      return (ɵInAppBrowser_BaseFactory || (ɵInAppBrowser_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(InAppBrowser)))(t || InAppBrowser);\n    };\n  }();\n\n  InAppBrowser.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: InAppBrowser,\n    factory: function factory(t) {\n      return InAppBrowser.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InAppBrowser, [{\n      type: Injectable\n    }], null, null);\n  })();\n\n  return InAppBrowser;\n}(AwesomeCordovaNativePlugin);\n\nexport { InAppBrowser };","map":{"version":3,"names":["__extends","Injectable","AwesomeCordovaNativePlugin","instanceAvailability","cordovaInstance","Observable","ɵngcc0","InAppBrowserObject","url","target","options","Object","keys","map","key","join","_objectInstance","cordova","InAppBrowser","open","e","window","console","warn","prototype","_loadAfterBeforeload","strUrl","arguments","show","close","hide","executeScript","script","insertCSS","css","on","event","_this","observer","addEventListener","next","bind","removeEventListener","_super","apply","create","pluginName","plugin","pluginRef","repo","platforms","ɵfac","ɵInAppBrowser_BaseFactory","InAppBrowser_Factory","t","ɵɵgetInheritedFactory","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","type"],"sources":["/home/user-vestapp-arnaldo/Projetos/vestapp-aplicativo/node_modules/@awesome-cordova-plugins/in-app-browser/__ivy_ngcc__/ngx/index.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AwesomeCordovaNativePlugin, instanceAvailability, cordovaInstance } from '@awesome-cordova-plugins/core';\nimport { Observable } from 'rxjs';\nimport * as ɵngcc0 from '@angular/core';\nvar InAppBrowserObject = /** @class */ (function () {\n    /**\n     * Opens a URL in a new InAppBrowser instance, the current browser instance, or the system browser.\n     *\n     * @param {string} url     The URL to load.\n     * @param {string} [target=\"self\"]  The target in which to load the URL, an optional parameter that defaults to _self.\n     *                 _self: Opens in the WebView if the URL is in the white list, otherwise it opens in the InAppBrowser.\n     *                 _blank: Opens in the InAppBrowser.\n     *                 _system: Opens in the system's web browser.\n     * @param {string | InAppBrowserOptions} [options] Options for the InAppBrowser. Optional, defaulting to: location=yes.\n     *                 The options string must not contain any blank space, and each feature's\n     *                 name/value pairs must be separated by a comma. Feature names are case insensitive.\n     */\n    function InAppBrowserObject(url, target, options) {\n        try {\n            if (options && typeof options !== 'string') {\n                options = Object.keys(options)\n                    .map(function (key) { return key + \"=\" + options[key]; })\n                    .join(',');\n            }\n            this._objectInstance = cordova.InAppBrowser.open(url, target, options);\n        }\n        catch (e) {\n            if (typeof window !== 'undefined') {\n                window.open(url, target);\n            }\n            console.warn('Native: InAppBrowser is not installed or you are running on a browser. Falling back to window.open.');\n        }\n    }\n    InAppBrowserObject.prototype._loadAfterBeforeload = function (strUrl) { return cordovaInstance(this, \"_loadAfterBeforeload\", { \"sync\": true }, arguments); };\n    InAppBrowserObject.prototype.show = function () { return cordovaInstance(this, \"show\", { \"sync\": true }, arguments); };\n    InAppBrowserObject.prototype.close = function () { return cordovaInstance(this, \"close\", { \"sync\": true }, arguments); };\n    InAppBrowserObject.prototype.hide = function () { return cordovaInstance(this, \"hide\", { \"sync\": true }, arguments); };\n    InAppBrowserObject.prototype.executeScript = function (script) { return cordovaInstance(this, \"executeScript\", {}, arguments); };\n    InAppBrowserObject.prototype.insertCSS = function (css) { return cordovaInstance(this, \"insertCSS\", {}, arguments); };\n    InAppBrowserObject.prototype.on = function (event) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                return new Observable(function (observer) {\n                    _this._objectInstance.addEventListener(event, observer.next.bind(observer));\n                    return function () { return _this._objectInstance.removeEventListener(event, observer.next.bind(observer)); };\n                });\n            }\n        })();\n    };\n    InAppBrowserObject.prototype.on = function (event) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                return new Observable(function (observer) {\n                    _this._objectInstance.addEventListener(event, observer.next.bind(observer));\n                    return function () { return _this._objectInstance.removeEventListener(event, observer.next.bind(observer)); };\n                });\n            }\n        })();\n    };\n    return InAppBrowserObject;\n}());\nexport { InAppBrowserObject };\nvar InAppBrowser = /** @class */ (function (_super) {\n    __extends(InAppBrowser, _super);\n    function InAppBrowser() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Opens a URL in a new InAppBrowser instance, the current browser instance, or the system browser.\n     *\n     * @param  url {string}     The URL to load.\n     * @param  target {string}  The target in which to load the URL, an optional parameter that defaults to _self.\n     * @param  options {string} Options for the InAppBrowser. Optional, defaulting to: location=yes.\n     *                 The options string must not contain any blank space, and each feature's\n     *                 name/value pairs must be separated by a comma. Feature names are case insensitive.\n     * @returns {InAppBrowserObject}\n     */\n    InAppBrowser.prototype.create = function (url, target, options) {\n        return new InAppBrowserObject(url, target, options);\n    };\n    InAppBrowser.pluginName = \"InAppBrowser\";\n    InAppBrowser.plugin = \"cordova-plugin-inappbrowser\";\n    InAppBrowser.pluginRef = \"cordova.InAppBrowser\";\n    InAppBrowser.repo = \"https://github.com/apache/cordova-plugin-inappbrowser\";\n    InAppBrowser.platforms = [\"AmazonFire OS\", \"Android\", \"Browser\", \"iOS\", \"macOS\", \"Windows\"];\nInAppBrowser.ɵfac = /*@__PURE__*/ function () { var ɵInAppBrowser_BaseFactory; return function InAppBrowser_Factory(t) { return (ɵInAppBrowser_BaseFactory || (ɵInAppBrowser_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(InAppBrowser)))(t || InAppBrowser); }; }();\nInAppBrowser.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: InAppBrowser, factory: function (t) { return InAppBrowser.ɵfac(t); } });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InAppBrowser, [{\n        type: Injectable\n    }], null, null); })();\n    return InAppBrowser;\n}(AwesomeCordovaNativePlugin));\nexport { InAppBrowser };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}