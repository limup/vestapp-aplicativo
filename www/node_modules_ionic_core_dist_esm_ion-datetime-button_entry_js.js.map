{"version":3,"file":"node_modules_ionic_core_dist_esm_ion-datetime-button_entry_js.js","mappings":"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","sources":["./node_modules/@ionic/core/dist/esm/ion-datetime-button.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, H as Host, i as getElement } from './index-1a99aeb7.js';\nimport { b as getIonMode } from './ionic-global-04e268e7.js';\nimport { a as addEventListener, c as componentOnReady } from './helpers-4d272360.js';\nimport { p as printIonWarning, b as printIonError } from './index-c4b11676.js';\nimport { c as createColorClasses } from './theme-7670341c.js';\nimport { p as parseDate, f as getToday, G as is24Hour, P as getLocalizedDateTime, D as getMonthAndYear, H as getLocalizedTime, Q as getMonthDayAndYear } from './parse-9a48ce79.js';\n\nconst iosDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;padding-left:12px;padding-right:12px;padding-top:6px;padding-bottom:6px;margin-left:2px;margin-right:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;overflow:hidden}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{padding-left:unset;padding-right:unset;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{margin-left:unset;margin-right:unset;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px}}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\n\nconst mdDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;padding-left:12px;padding-right:12px;padding-top:6px;padding-bottom:6px;margin-left:2px;margin-right:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;overflow:hidden}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{padding-left:unset;padding-right:unset;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{margin-left:unset;margin-right:unset;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px}}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\n\nconst DatetimeButton = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.datetimeEl = null;\n    this.overlayEl = null;\n    this.datetimePresentation = 'date-time';\n    this.datetimeActive = false;\n    /**\n     * The color to use from your application's color palette.\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     * For more information on colors, see [theming](/docs/theming/basics).\n     */\n    this.color = 'primary';\n    /**\n     * If `true`, the user cannot interact with the button.\n     */\n    this.disabled = false;\n    /**\n     * Check the value property on the linked\n     * ion-datetime and then format it according\n     * to the locale specified on ion-datetime.\n     */\n    this.setDateTimeText = () => {\n      const { datetimeEl, datetimePresentation } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      const { value, locale, hourCycle, preferWheel, multiple } = datetimeEl;\n      if (multiple) {\n        printIonWarning(`Multi-date selection cannot be used with ion-datetime-button.\n\nPlease upvote https://github.com/ionic-team/ionic-framework/issues/25668 if you are interested in seeing this functionality added.\n      `, this.el);\n        return;\n      }\n      /**\n       * Both ion-datetime and ion-datetime-button default\n       * to today's date and time if no value is set.\n       */\n      const parsedDatetime = parseDate(value || getToday());\n      const use24Hour = is24Hour(locale, hourCycle);\n      // TODO(FW-1865) - Remove once FW-1831 is fixed.\n      parsedDatetime.tzOffset = undefined;\n      this.dateText = this.timeText = undefined;\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const dateText = getMonthDayAndYear(locale, parsedDatetime);\n          const timeText = getLocalizedTime(locale, parsedDatetime, use24Hour);\n          if (preferWheel) {\n            this.dateText = `${dateText} ${timeText}`;\n          }\n          else {\n            this.dateText = dateText;\n            this.timeText = timeText;\n          }\n          break;\n        case 'date':\n          this.dateText = getMonthDayAndYear(locale, parsedDatetime);\n          break;\n        case 'time':\n          this.timeText = getLocalizedTime(locale, parsedDatetime, use24Hour);\n          break;\n        case 'month-year':\n          this.dateText = getMonthAndYear(locale, parsedDatetime);\n          break;\n        case 'month':\n          this.dateText = getLocalizedDateTime(locale, parsedDatetime, { month: 'long' });\n          break;\n        case 'year':\n          this.dateText = getLocalizedDateTime(locale, parsedDatetime, { year: 'numeric' });\n          break;\n      }\n    };\n    /**\n     * Waits for the ion-datetime to re-render.\n     * This is needed in order to correctly position\n     * a popover relative to the trigger element.\n     */\n    this.waitForDatetimeChanges = async () => {\n      const { datetimeEl } = this;\n      if (!datetimeEl) {\n        return Promise.resolve();\n      }\n      return new Promise((resolve) => {\n        addEventListener(datetimeEl, 'ionRender', resolve, { once: true });\n      });\n    };\n    this.handleDateClick = async (ev) => {\n      const { datetimeEl, datetimePresentation } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      let needsPresentationChange = false;\n      /**\n       * When clicking the date button,\n       * we need to make sure that only a date\n       * picker is displayed. For presentation styles\n       * that display content other than a date picker,\n       * we need to update the presentation style.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const needsChange = datetimeEl.presentation !== 'date';\n          /**\n           * The date+time wheel picker\n           * shows date and time together,\n           * so do not adjust the presentation\n           * in that case.\n           */\n          if (!datetimeEl.preferWheel && needsChange) {\n            datetimeEl.presentation = 'date';\n            needsPresentationChange = true;\n          }\n          break;\n      }\n      /**\n       * Track which button was clicked\n       * so that it can have the correct\n       * activated styles applied when\n       * the modal/popover containing\n       * the datetime is opened.\n       */\n      this.selectedButton = 'date';\n      this.presentOverlay(ev, needsPresentationChange, this.dateTargetEl);\n    };\n    this.handleTimeClick = (ev) => {\n      const { datetimeEl, datetimePresentation } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      let needsPresentationChange = false;\n      /**\n       * When clicking the time button,\n       * we need to make sure that only a time\n       * picker is displayed. For presentation styles\n       * that display content other than a time picker,\n       * we need to update the presentation style.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const needsChange = datetimeEl.presentation !== 'time';\n          if (needsChange) {\n            datetimeEl.presentation = 'time';\n            needsPresentationChange = true;\n          }\n          break;\n      }\n      /**\n       * Track which button was clicked\n       * so that it can have the correct\n       * activated styles applied when\n       * the modal/popover containing\n       * the datetime is opened.\n       */\n      this.selectedButton = 'time';\n      this.presentOverlay(ev, needsPresentationChange, this.timeTargetEl);\n    };\n    /**\n     * If the datetime is presented in an\n     * overlay, the datetime and overlay\n     * should be appropriately sized.\n     * These classes provide default sizing values\n     * that developers can customize.\n     * The goal is to provide an overlay that is\n     * reasonably sized with a datetime that\n     * fills the entire container.\n     */\n    this.presentOverlay = async (ev, needsPresentationChange, triggerEl) => {\n      const { overlayEl } = this;\n      if (!overlayEl) {\n        return;\n      }\n      if (overlayEl.tagName === 'ION-POPOVER') {\n        /**\n         * When the presentation on datetime changes,\n         * we need to wait for the component to re-render\n         * otherwise the computed width/height of the\n         * popover content will be wrong, causing\n         * the popover to not align with the trigger element.\n         */\n        if (needsPresentationChange) {\n          await this.waitForDatetimeChanges();\n        }\n        /**\n         * We pass the trigger button element\n         * so that the popover aligns with the individual\n         * button that was clicked, not the component container.\n         */\n        overlayEl.present(Object.assign(Object.assign({}, ev), { detail: {\n            ionShadowTarget: triggerEl,\n          } }));\n      }\n      else {\n        overlayEl.present();\n      }\n    };\n  }\n  async componentWillLoad() {\n    const { datetime } = this;\n    if (!datetime) {\n      printIonError('An ID associated with an ion-datetime instance is required for ion-datetime-button to function properly.', this.el);\n      return;\n    }\n    const datetimeEl = (this.datetimeEl = document.getElementById(datetime));\n    if (!datetimeEl) {\n      printIonError(`No ion-datetime instance found for ID '${datetime}'.`, this.el);\n      return;\n    }\n    /**\n     * Since the datetime can be used in any context (overlays, accordion, etc)\n     * we track when it is visible to determine when it is active.\n     * This informs which button is highlighted as well as the\n     * aria-expanded state.\n     */\n    const io = new IntersectionObserver((entries) => {\n      const ev = entries[0];\n      this.datetimeActive = ev.isIntersecting;\n    }, {\n      threshold: 0.01,\n    });\n    io.observe(datetimeEl);\n    /**\n     * Get a reference to any modal/popover\n     * the datetime is being used in so we can\n     * correctly size it when it is presented.\n     */\n    const overlayEl = (this.overlayEl = datetimeEl.closest('ion-modal, ion-popover'));\n    /**\n     * The .ion-datetime-button-overlay class contains\n     * styles that allow any modal/popover to be\n     * sized according to the dimensions of the datetime.\n     * If developers want a smaller/larger overlay all they need\n     * to do is change the width/height of the datetime.\n     * Additionally, this lets us avoid having to set\n     * explicit widths on each variant of datetime.\n     */\n    if (overlayEl) {\n      overlayEl.classList.add('ion-datetime-button-overlay');\n    }\n    componentOnReady(datetimeEl, () => {\n      const datetimePresentation = (this.datetimePresentation = datetimeEl.presentation || 'date-time');\n      /**\n       * Set the initial display\n       * in the rendered buttons.\n       *\n       * From there, we need to listen\n       * for ionChange to be emitted\n       * from datetime so we know when\n       * to re-render the displayed\n       * text in the buttons.\n       */\n      this.setDateTimeText();\n      addEventListener(datetimeEl, 'ionChange', this.setDateTimeText);\n      /**\n       * Configure the initial selected button\n       * in the event that the datetime is displayed\n       * without clicking one of the datetime buttons.\n       * For example, a datetime could be expanded\n       * in an accordion. In this case users only\n       * need to click the accordion header to show\n       * the datetime.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'date':\n        case 'month-year':\n        case 'month':\n        case 'year':\n          this.selectedButton = 'date';\n          break;\n        case 'time-date':\n        case 'time':\n          this.selectedButton = 'time';\n          break;\n      }\n    });\n  }\n  render() {\n    const { color, dateText, timeText, selectedButton, datetimeActive, disabled } = this;\n    const mode = getIonMode(this);\n    return (h(Host, { class: createColorClasses(color, {\n        [mode]: true,\n        [`${selectedButton}-active`]: datetimeActive,\n        ['datetime-button-disabled']: disabled,\n      }) }, dateText && (h(\"button\", { class: \"ion-activatable\", id: \"date-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleDateClick, disabled: disabled, part: \"native\", ref: (el) => (this.dateTargetEl = el) }, h(\"slot\", { name: \"date-target\" }, dateText), mode === 'md' && h(\"ion-ripple-effect\", null))), timeText && (h(\"button\", { class: \"ion-activatable\", id: \"time-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleTimeClick, disabled: disabled, part: \"native\", ref: (el) => (this.timeTargetEl = el) }, h(\"slot\", { name: \"time-target\" }, timeText), mode === 'md' && h(\"ion-ripple-effect\", null)))));\n  }\n  get el() { return getElement(this); }\n};\nDatetimeButton.style = {\n  ios: iosDatetimeButtonCss,\n  md: mdDatetimeButtonCss\n};\n\nexport { DatetimeButton as ion_datetime_button };\n"],"names":["r","registerInstance","h","H","Host","i","getElement","b","getIonMode","a","addEventListener","c","componentOnReady","p","printIonWarning","printIonError","createColorClasses","parseDate","f","getToday","G","is24Hour","P","getLocalizedDateTime","D","getMonthAndYear","getLocalizedTime","Q","getMonthDayAndYear","iosDatetimeButtonCss","mdDatetimeButtonCss","DatetimeButton","hostRef","datetimeEl","overlayEl","datetimePresentation","datetimeActive","color","disabled","setDateTimeText","value","locale","hourCycle","preferWheel","multiple","el","parsedDatetime","use24Hour","tzOffset","undefined","dateText","timeText","month","year","waitForDatetimeChanges","Promise","resolve","once","handleDateClick","ev","needsPresentationChange","needsChange","presentation","selectedButton","presentOverlay","dateTargetEl","handleTimeClick","timeTargetEl","triggerEl","tagName","present","Object","assign","detail","ionShadowTarget","datetime","document","getElementById","io","IntersectionObserver","entries","isIntersecting","threshold","observe","closest","classList","add","mode","class","id","onClick","part","ref","name","style","ios","md","ion_datetime_button"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}